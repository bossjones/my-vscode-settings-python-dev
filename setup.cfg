[metadata]
name = fakepythonrepo
description = tui application to create concat commands for ffmpeg
long_description = file: README.md
long_description_content_type = text/markdown
url = https://fakepythonrepo.org
author = fakepythonrepo team
author_email = bossjones@theblacktonystark.com
license = MIT
license_file = LICENSE
classifiers =
    Development Status :: 3 - Alpha
    Environment :: X11 Applications :: Qt
    Intended Audience :: Education
    Intended Audience :: Science/Research
    License :: OSI Approved :: MIT
    License :: OSI Approved :: MIT License
    Operating System :: MacOS
    Operating System :: Microsoft :: Windows
    Operating System :: POSIX
    Operating System :: Unix
    Programming Language :: C
    Programming Language :: Python
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3 :: Only
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Topic :: Scientific/Engineering
    Topic :: Scientific/Engineering :: Bio-Informatics
    Topic :: Scientific/Engineering :: Information Analysis
    Topic :: Scientific/Engineering :: Visualization
    Topic :: Utilities
download_url = https://github.com/bossjones/fakepythonrepo

[options]
python_requires = >=3.9

[build_docs]
source-dir = docs/
build-dir = docs/_build
all_files = 1

[upload_docs]
upload-dir = docs/_build/html

[bumpversion]
current_version = 0.1.0
commit = True
tag = True
parse = (?P<major>\d+)\.(?P<minor>\d+)\.(?P<patch>\d+)(-(?P<stage>[^.]*)\.(?P<devnum>\d+))?
serialize =
    {major}.{minor}.{patch}-{stage}.{devnum}
    {major}.{minor}.{patch}

[bumpversion:part:stage]
optional_value = stable
first_value = stable
values =
    alpha
    beta
    stable

[bumpversion:file:setup.py]
search = version='{current_version}'
replace = version='{new_version}'

[bumpversion:file:fakepythonrepo/__init__.py]
search = __version__ = '{current_version}'
replace = __version__ = '{new_version}'

[wheel]
universal = 1

[bdist_wheel]
universal = 1

[flake8]
ignore =
    E741
    F812
    H101
    H202
    H233
    H301
    H306
    H401
    H403
    H404
    H405
    H501
    F401
    W604
    F811
    F841
    E302
    E401
    E501
    E265
    E713
    E402
    D204
    D102
    D400
    D205
    D202
    D103
    D209
    D105
    D101
    D401
    D200
    E127
    D100
    E241
    E704
    E251
    W503
    W504
    E722
    W605
exclude =
    .git,
    __pycache__,
    docs/source/conf.py,
    old,
    build,
    dist,
    .svn,
    CVS,
    .bzr,
    .hg,
    .tox,
    docs,
    virtualenv_run,
    tests/*.,
    fakepythonrepo_venv*,
    fakepythonrepo_venv*/*
    .venv,
    www_static,
    venv,
    bin,
    lib,
    deps,
    tests/fixtures/simple/packs/linux/actions/checks,
    .eggs,
    stubs/*
max-line-length = 200
max-complexity = 12

[pycodestyle]
ignore = E741,F812,H101,H202,H233,H301,H306,H401,H403,H404,H405,H501,F401,W604,F811,F841,E302,E401,E501,E265,E713,E402,D204,D102,D400,D205,D202,D103,D209,D105,D101,D401,D200,E127,D100,E241,E704,E251,W503,W504,E722,W605,W505
max_line_length = 200
max_doc_length = 72

[tool:pytest]
asyncio_mode=auto
# filterwarnings = error,ignore::DeprecationWarning,ignore:.*unclosed.*:ResourceWarning
filterwarnings = error
env =
    SECRET_KEY=secret
    fakepythonrepo_DB_BASE=fakepythonrepo_test
timeout = 60
testpaths = tests
norecursedirs =
    .git
    testing_config
    dist
    build
    .tox
    tests/fixtures/simple/packs/linux/actions/checks
markers =
    torchtests: All pytorch related tests
    run_loop: Mark coroutine to be run with asyncio loop.
    redis_version(*version, reason): Mark test expecting minimum Redis version
    skip(reason): Skip test
    mypy: marks tests dealing with mypy (deselect with '-m "not mypy"')
    usersonly: marks tests dealing with users (deselect with '-m "not usersonly"')
    loginonly: marks tests dealing with login (deselect with '-m "not loginonly"')
    actiononly: marks tests dealing with action (deselect with '-m "not actiononly"')
    unittest: marks tests dealing with unittest (deselect with '-m "not unittest"')
    integration: marks tests dealing with integration testing (deselect with '-m "not integration"')
    packsonly: marks tests dealing with packs (deselect with '-m "not packsonly"')
    sensorsonly: marks tests dealing with sensors (deselect with '-m "not sensorsonly"')
    triggeronly: marks tests dealing with trigger (deselect with '-m "not triggeronly"')
    youtubeonly: marks tests dealing with youtube (deselect with '-m "not youtubeonly"')
    csvonly: marks tests dealing with csv (deselect with '-m "not csvonly"')
    fulltextsearchonly: marks tests dealing with full text search (deselect with '-m "not fulltextsearchonly"')
    triggerinstanceonly: marks tests dealing with triggerinstance (deselect with '-m "not triggerinstanceonly"')
    triggertypeonly: marks tests dealing with triggertype (deselect with '-m "not triggertypeonly"')
    configonly: marks tests dealing with configs (deselect with '-m "not configonly"')
    txtonly: marks tests dealing with txt (deselect with '-m "not txtonly"')
    smartonly: marks tests dealing with smart configs (deselect with '-m "not smartonly"')
    baseconfigonly: marks tests dealing with baseconfigs (deselect with '-m "not baseconfigonly"')
    settingsonly: marks tests dealing with settings (deselect with '-m "not settingsonly"')
    workspaceonly: marks tests dealing with workspace (deselect with '-m "not workspaceonly"')
    clientonly: marks tests dealing with client (deselect with '-m "not clientonly"')
    dbonly: marks tests dealing with db (deselect with '-m "not dbonly"')
    pathsonly: marks tests dealing with paths module (deselect with '-m "not pathsonly"')
    fastapionly: marks tests dealing with fastapi (deselect with '-m "not fastapionly"')
    constantsonly: marks tests dealing with constants (deselect with '-m "not constantsonly"')
    jwtonly: marks tests dealing with jwt (deselect with '-m "not jwtonly"')
    jsononly: marks tests dealing with json (deselect with '-m "not jsononly"')
    utilsonly: marks tests dealing with utils (deselect with '-m "not utilsonly"')
    clionly: marks tests dealing with cli (deselect with '-m "not clionly"')
    itemonly: marks tests dealing with items (deselect with '-m "not itemonly"')
    loggeronly: marks tests dealing with loggers (deselect with '-m "not loggeronly"')
    datainconsistent: marks tests dealing with inconsistencies between the apis data and the db itself via the crud functions (deselect with '-m "not datainconsistent"')
    needsisolatedfilesystem: marks tests dealing that need to be using an isolated filesystem (deselect with '-m "not needsisolatedfilesystem"')
    mockedfs: marks tests dealing that need to be using an isolated filesystem (deselect with '-m "not mockedfs"')
    convertingtotestclientstarlette: marks tests that are in the process of being converted to use TestClient (deselect with '-m "not convertingtotestclientstarlette"')
# addopts = --cov-append --cov=fakepythonrepo --cov-report term-missing --cov-report xml:cov.xml --cov-report html:htmlcov --cov-report annotate:cov_annotate --showlocals --tb=short
mock_use_standalone_module = False

[aliases]
test = pytest
dists = sdist bdist_wheel

[test]
addopts = --verbose
extras = True

[coverage:run]
source = fakepythonrepo
omit =
    fakepythonrepo/pkg/*
    fakepythonrepo/docs/*
    fakepythonrepo/tests/*
    /etc/python3.6/sitecustomize.py
    venv/**
    fakepythonrepo/tests/**
    .eggs/**
    /home/travis/virtualenv/**
    tests/fixtures/simple/packs/linux/actions/checks/**

[coverage:report]
exclude_lines =
    pragma: no cover

    def __repr__
    if self\.debug

    raise AssertionError
    raise NotImplementedError

    if 0:
    if __name__ == .__main__.:

[coverage:paths]
source =
    fakepythonrepo/
    /home/developer/app/fakepythonrepo

[devpi:upload]
no-vcs = 1
formats =
    sdist
    bdist_wheel

[autoflake]
imports=torch,torchvision,torchaudio
