# [tool.poetry]
# name = "fakepythonrepo"

[tool.pyright]
include = ["fakepythonrepo"]
exclude = ["**/node_modules",
    "**/__pycache__",
    "tasks",
    "typings"
]
# ignore = ["src/oldstuff"]
# defineConstant [map of constants to values (boolean or string), optional]: Set of identifiers that should be assumed to contain a constant value wherever used within this program. For example, { "DEBUG": true } indicates that pyright should assume that the identifier DEBUG will always be equal to True. If this identifier is used within a conditional expression (such as if not DEBUG:) pyright will use the indicated value to determine whether the guarded block is reachable or not. Member expressions that reference one of these constants (e.g. my_module.DEBUG) are also supported.
# defineConstant = { DEBUG = true }
# stubPath = "typings"
# venv = "env367"

# https://github.com/microsoft/pyright/blob/main/docs/configuration.md#reportUndefinedVariable
reportMissingImports = true
reportMissingTypeStubs = false
reportUndefinedVariable = "error"
reportInvalidTypeVarUse = "warning"

# reportUninitializedInstanceVariable [boolean or string, optional]: Generate or suppress diagnostics for instance variables within a class that are not initialized or declared within the class body or the __init__ method. The default value for this setting is "none".

# reportInvalidStringEscapeSequence [boolean or string, optional]: Generate or suppress diagnostics for invalid escape sequences used within string literals. The Python specification indicates that such sequences will generate a syntax error in future versions. The default value for this setting is "warning".

# reportUnknownParameterType [boolean or string, optional]: Generate or suppress diagnostics for input or return parameters for functions or methods that have an unknown type. The default value for this setting is "none".

# reportUnknownArgumentType [boolean or string, optional]: Generate or suppress diagnostics for call arguments for functions or methods that have an unknown type. The default value for this setting is "none".

# reportUnknownLambdaType [boolean or string, optional]: Generate or suppress diagnostics for input or return parameters for lambdas that have an unknown type. The default value for this setting is "none".

# reportUnknownVariableType [boolean or string, optional]: Generate or suppress diagnostics for variables that have an unknown type. The default value for this setting is "none".

# reportUnknownMemberType [boolean or string, optional]: Generate or suppress diagnostics for class or instance variables that have an unknown type. The default value for this setting is "none".

# reportMissingParameterType [boolean or string, optional]: Generate or suppress diagnostics for input parameters for functions or methods that are missing a type annotation. Th

pythonVersion = "3.10"
# pythonPlatform = "Linux"

# executionEnvironments = [
#   { root = "src/web", pythonVersion = "3.5", pythonPlatform = "Windows", extraPaths = [ "src/service_libs" ] },
#   { root = "src/sdk", pythonVersion = "3.0", extraPaths = [ "src/backend" ] },
#   { root = "src/tests", extraPaths = ["src/tests/e2e", "src/sdk" ]},
#   { root = "src" }
# ]

[tool.isort]
# https://github.com/PyCQA/isort/wiki/isort-Settings
profile = "black"
multi_line_output = 3
# src_paths = ["fakepythonrepo",]
group_by_package=true

# SOURCE: https://github.com/home-assistant/core/blob/dev/pyproject.toml
# will group `import x` and `from x import` of the same module.
force_sort_within_sections = true
known_first_party = [
    "fakepythonrepo",
    # "tests",
]
known_third_party = [
    "fastapi", "pydantic", "starlette", "torch", "torchvision"
]
forced_separate = [
    "tests",
]
combine_as_imports = true
# SOURCE: https://github.com/home-assistant/core/blob/dev/pyproject.toml - end
extend_skip_glob = ["*/site-packages/*", "*/db/migration/*"]


[tool.mypy]
strict = true
ignore_missing_imports = true
allow_subclassing_any = true
allow_untyped_calls = true
pretty = true
show_error_codes = true
implicit_reexport = true
allow_untyped_decorators = true
warn_unused_ignores = false
warn_return_any = false
namespace_packages = true
exclude = [
    "./contrib/"
]

# Remove this and add `types-redis`
# when the issue https://github.com/python/typeshed/issues/8242 is resolved.
[[tool.mypy.overrides]]
module = [
    'redis.asyncio'
]
ignore_missing_imports = true

[tool.poetry2conda]
name = "fakepythonrepo3"

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    # "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

# ------------------------------------
# NOTE: Ruff rule keys
# ------------------------------------
# Pyflakes (F)
# pycodestyle (E, W)
# Error (E)
# Warning (W)
# mccabe (C90)
# isort (I)
# pep8-naming (N)
# pydocstyle (D)
# pyupgrade (UP)
# flake8-2020 (YTT)
# flake8-annotations (ANN)
# flake8-bandit (S)
# flake8-blind-except (BLE)
# flake8-boolean-trap (FBT)
# flake8-bugbear (B)
# flake8-builtins (A)
# flake8-commas (COM)
# flake8-comprehensions (C4)
# flake8-datetimez (DTZ)
# flake8-debugger (T10)
# flake8-django (DJ)
# flake8-errmsg (EM)
# flake8-executable (EXE)
# flake8-implicit-str-concat (ISC)
# flake8-import-conventions (ICN)
# flake8-logging-format (G)
# flake8-no-pep420 (INP)
# flake8-pie (PIE)
# flake8-print (T20)
# flake8-pyi (PYI)
# flake8-pytest-style (PT)
# flake8-quotes (Q)
# flake8-raise (RSE)
# flake8-return (RET)
# flake8-self (SLF)
# flake8-simplify (SIM)
# flake8-tidy-imports (TID)
# flake8-type-checking (TCH)
# flake8-unused-arguments (ARG)
# flake8-use-pathlib (PTH)
# eradicate (ERA)
# pandas-vet (PD)
# pygrep-hooks (PGH)
# Pylint (PL)
# Convention (PLC)
# Error (PLE)
# Refactor (PLR)
# Warning (PLW)
# tryceratops (TRY)
# NumPy-specific rules (NPY)
# Ruff-specific rules (RUF)

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-third-party = ["fastapi", "pydantic", "starlette", "torch", "torchvision"]
known-first-party = ["fakepythonrepo"]
